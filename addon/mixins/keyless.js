import Ember from 'ember';
import generateUUID from 'ember-cli-keyless/mixins/generate-uuid';

/**
 * Keyless mixin â€” allow use embedded records without id
 * @mixin keyless
 *
 * @example <caption>Define ember serializator, and extend default RESTSerializer with 
 * DS.EmbeddedRecordsMixin and Keyless mixin. Add keys embedded:'always'
 * and keyless:true to attribute</caption>
 *
 * import DS from 'ember-data';
 * import Keyless from 'ember-cli-keyless/mixins/keyless';
 *
 * export default DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, Keyless, {
 *   attrs: {
 *     someattibute: { embedded: 'always', keyless: true }
 *   }
 * });
 **/

export default Ember.Mixin.create(generateUUID, {
  
  hasKeylessOption: function(attr) {
    var option = this.attrsOption(attr);
    return (option && option.keyless === true && option.embedded === 'always');
  },
  
//  generateIdForRecord: function(store, type, inputProperties) {
// NOTE: this is function for adapter, see http://emberjs.com/api/data/classes/DS.Adapter.html#method_generateIdForRecord
//  },
  
  generateKey: function(store, record, type) {
//    record.id = store.adapter.generateIdForRecord(store, type);
//    debugger;
    if (typeof type === 'string') {
//      Ember.Logger.log(typeof type);
//      Ember.Logger.log(store.adapterFor(type));
    }
    record.id = type+'-'+this.generateUUID();// Ember.generateGuid(null, type);
    record.autoGenerated = true;
  },
  
  normalize: function(typeClass, hash/*, prop*/) {

    var normalizedHash = {
      data : {
        id: this.extractId(typeClass, hash),
        type: typeClass.modelName,
        attributes: this.extractAttributes(typeClass, hash),
        relationships: this.extractRelationships(typeClass, hash)
      }
    };
    
    return this.extractEmbeddedRecords(this, this.store, typeClass, normalizedHash);
  },
  
  extractEmbeddedRecords: function(serializer, store, typeClass, partial) {
    
    var self = this;
    
    typeClass.eachRelationship(function(key, relationship) {
      
      if (serializer.hasDeserializeRecordsOption(key)) {
        
        if (relationship.kind === "hasMany") {
          self.extractEmbeddedHasMany(store, key, partial, relationship);
        }        
        if (relationship.kind === "belongsTo") {
          self.extractEmbeddedBelongsTo(store, key, partial, relationship);
        }
      }
    });
    
    return partial;
  },
  
  extractEmbeddedHasMany: function(store, key, hash, relationshipMeta) {

    let relationshipHash = Ember.get(hash, `data.relationships.${key}.data`);
    
    if (!relationshipHash) { return; }
    
    let hasMany = new Array(relationshipHash.length);
    
    for (let i = 0; i < relationshipHash.length; i++) {
      let item = relationshipHash[i];
      if (this.hasKeylessOption(key) /*&& relationshipHash.id == null*/) { // overwrite ID in any case
        this.generateKey(store, item, item.type || store.modelFor(relationshipMeta.type));
      }
      let { data, included } = this._normalizeEmbeddedRelationship(store, relationshipMeta, item);
      hash.included = hash.included || [];
      hash.included.push(data);
      if (included) {
        hash.included.push(...included);
      }
      hasMany[i] = { id: data.id, type: data.type };
    }
    let relationship = { data: hasMany };
    Ember.set(hash, `data.relationships.${key}`, relationship);
  },
  
  extractEmbeddedBelongsTo(store, key, hash, relationshipMeta) {

    let relationshipHash = Ember.get(hash, `data.relationships.${key}.data`);
    
    if (!relationshipHash) { return; }
    
    if (this.hasKeylessOption(key) /*&& relationshipHash.id == null*/) { // overwrite ID in any case
      this.generateKey(store, relationshipHash, relationshipHash.type || store.modelFor(relationshipMeta.type));
    }
    
    let { data, included } = this._normalizeEmbeddedRelationship(store, relationshipMeta, relationshipHash);
    
    hash.included = hash.included || [];
    hash.included.push(data);
    if (included) {
      hash.included.push(...included);
    }

    let belongsTo = { id: data.id, type: data.type };
    let relationship = { data: belongsTo };

    Ember.set(hash, `data.relationships.${key}`, relationship);
  },
  
  serializeHasMany: function(snapshot, json, relationship) {
    var attr = relationship.key;
    if (this.noSerializeOptionSpecified(attr)) {
      this._super(snapshot, json, relationship);
      return;
    }
    var includeIds = this.hasSerializeIdsOption(attr);
    var includeRecords = this.hasSerializeRecordsOption(attr);
    var serializedKey/*, includeId, records*/;
    
    if (includeIds) {
      serializedKey = this.keyForRelationship(attr, relationship.kind, 'serialize');
      json[serializedKey] = snapshot.hasMany(attr, { ids: true });
    } else if (includeRecords) {
      serializedKey = this._getMappedKey(relationship.key, snapshot.type);
      if (serializedKey === relationship.key && this.keyForRelationship) {
        serializedKey = this.keyForRelationship(relationship.key, relationship.kind, "serialize");
      }
      
      json[serializedKey] = this._generateSerializedHasMany(snapshot, relationship);
    }
  },

  _generateSerializedHasMany(snapshot, relationship) {
    let hasMany = snapshot.hasMany(relationship.key);
    let manyArray = Ember.A(hasMany);
    let ret = new Array(manyArray.length);

    for (let i = 0; i < manyArray.length; i++) {
      let embeddedSnapshot = manyArray[i];
      let includeId = this.hasKeylessOption(relationship.key) === false;
      let embeddedJson = embeddedSnapshot.record.serialize({ includeId: includeId });
      this.removeEmbeddedForeignKey(snapshot, embeddedSnapshot, relationship, embeddedJson);
      ret[i] = embeddedJson;
    }

    return ret;
  },

  serializeBelongsTo: function(snapshot, json, relationship) {
    var attr = relationship.key;
    if (this.noSerializeOptionSpecified(attr)) {
      this._super(snapshot, json, relationship);
      return;
    }
    var includeIds = this.hasSerializeIdsOption(attr);
    var includeRecords = this.hasSerializeRecordsOption(attr);
    var embeddedRecord = snapshot.belongsTo(attr);
    var key;
    if (includeIds) {
      key = this.keyForRelationship(attr, relationship.kind);
      if (!embeddedRecord) {
          json[key] = null;
      } else {
          json[key] = Ember.get(embeddedRecord, 'id');
      }
    } else if (includeRecords) {
      key = this.keyForAttribute(attr);
      if (!embeddedRecord) {
          json[key] = null;
      } else {
          var includeId = this.hasKeylessOption(key) === false;
          json[key] = embeddedRecord.serialize({includeId: includeId});
          this.removeEmbeddedForeignKey(snapshot, embeddedRecord, relationship, json[key]);
      }
    }
  }

});
